// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Waffle = require("../src/Waffle.bs.js");
var Caml_oo_curry = require("bs-platform/lib/js/caml_oo_curry.js");

describe("creating streams, piping, and listning", (function () {
        Jest.test("stream can take and return a value", (function () {
                var s = Waffle.stream(/* () */0);
                Waffle.pour(2, s);
                return Jest.Expect[/* toEqual */12](/* Some */[2], Jest.Expect[/* expect */0](Caml_oo_curry.js2(-900406885, 1, s, /* () */0)));
              }));
        Jest.test("piping a stream and receiving values", (function () {
                var s = Waffle.stream(/* () */0);
                var s2 = Waffle.stream(/* () */0);
                Waffle.pipe(s2, s);
                Waffle.pour(2, s);
                return Jest.Expect[/* toEqual */12](/* Some */[2], Jest.Expect[/* expect */0](Caml_oo_curry.js2(-900406885, 2, s2, /* () */0)));
              }));
        Jest.test("piped stream gets the default value", (function () {
                var s = Waffle.stream(/* () */0);
                var s2 = Waffle.stream(/* () */0);
                Waffle.pour(2, s);
                Waffle.pipe(s2, s);
                return Jest.Expect[/* toEqual */12](/* Some */[2], Jest.Expect[/* expect */0](Caml_oo_curry.js2(-900406885, 3, s2, /* () */0)));
              }));
        Jest.test("a listner gets notified on the default value", (function () {
                var s = Waffle.stream(/* () */0);
                var notified = [false];
                var listner = function (i) {
                  notified[0] = i === 2;
                  return /* () */0;
                };
                Waffle.pour(2, s);
                Waffle.on(listner, s);
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](notified[0]));
              }));
        return Jest.test("a listner gets notified on value changes", (function () {
                      var s = Waffle.stream(/* () */0);
                      var notified = [false];
                      var listner = function (i) {
                        notified[0] = i === 3;
                        return /* () */0;
                      };
                      Waffle.pour(2, s);
                      Waffle.on(listner, s);
                      Waffle.pour(3, s);
                      return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](notified[0]));
                    }));
      }));

describe("mapping and scanning", (function () {
        Jest.test("map transforms values", (function () {
                var increase = Waffle.map((function (i) {
                        return i + 1 | 0;
                      }));
                Waffle.pour(3, increase);
                return Jest.Expect[/* toEqual */12](/* Some */[4], Jest.Expect[/* expect */0](Caml_oo_curry.js2(-900406885, 4, increase, /* () */0)));
              }));
        Jest.test("mapAndPipe", (function () {
                var s = Waffle.stream(/* () */0);
                var increase = Waffle.mapAndPipe((function (i) {
                        return i + 1 | 0;
                      }), s);
                Waffle.pour(2, s);
                return Jest.Expect[/* toEqual */12](/* Some */[3], Jest.Expect[/* expect */0](Caml_oo_curry.js2(-900406885, 5, increase, /* () */0)));
              }));
        Jest.test("scan accumlator works", (function () {
                var sum = Waffle.scan((function (acc, i) {
                        return acc + i | 0;
                      }), 1);
                Waffle.pour(2, sum);
                Waffle.pour(3, sum);
                return Jest.Expect[/* toEqual */12](/* Some */[6], Jest.Expect[/* expect */0](Caml_oo_curry.js2(-900406885, 6, sum, /* () */0)));
              }));
        return Jest.test("scanAndPipe", (function () {
                      var s = Waffle.stream(/* () */0);
                      Waffle.pour(2, s);
                      var sum = Waffle.scanAndPipe((function (acc, i) {
                              return acc + i | 0;
                            }), 0, s);
                      Waffle.pour(3, s);
                      return Jest.Expect[/* toEqual */12](/* Some */[5], Jest.Expect[/* expect */0](Caml_oo_curry.js2(-900406885, 7, sum, /* () */0)));
                    }));
      }));

/*  Not a pure module */
